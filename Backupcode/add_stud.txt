import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'login_page.dart'; // Import for apiBaseUrl

class AddStud extends StatefulWidget {
  const AddStud({super.key});

  @override
  State<AddStud> createState() => _AddStudState();
}

class _AddStudState extends State<AddStud> {
  final _formKey = GlobalKey<FormState>();
  bool _isLoading = false;

  final TextEditingController _studentNameController = TextEditingController();
  final TextEditingController _admissionNoController = TextEditingController();
  final TextEditingController _academicYearController = TextEditingController();
  final TextEditingController _phoneController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _dobController = TextEditingController();
  final TextEditingController _fatherNameController = TextEditingController();
  final TextEditingController _motherNameController = TextEditingController();
  final TextEditingController _addressController = TextEditingController();
  final TextEditingController _parentPhoneController = TextEditingController();
  final TextEditingController _guardianNameController = TextEditingController();
  final TextEditingController _guardianPhoneController = TextEditingController();

  String? _selectedDepartment;
  String? _selectedSemester;
  String? _selectedGender;

  final List<String> departments = ['MCA', 'MBA'];
  final List<String> semesters = ['1', '2', '3', '4'];
  final List<String> genders = ['Male', 'Female', 'Other'];

  bool isValidEmail(String email) {
    return RegExp(r'^[\w-\.]+@gmail\.com$').hasMatch(email);
  }

  bool isValidPhone(String phone) {
    return RegExp(r'^\d{10}$').hasMatch(phone);
  }

  Future<void> _saveStudent() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
      });

      String admissionNo = _admissionNoController.text.trim();
      String parentPhone = _parentPhoneController.text.trim();
      String userId = "STUD$admissionNo";
      String password = "kmct@${parentPhone.substring(parentPhone.length - 4)}";

      final studentData = {
        "Student Name": _studentNameController.text.trim(),
        "Admission No": admissionNo,
        "Academic Year": _academicYearController.text.trim(),
        "Phone": _phoneController.text.trim(),
        "Email": _emailController.text.trim(),
        "DOB": _dobController.text.trim(),
        "Father Name": _fatherNameController.text.trim(),
        "Mother Name": _motherNameController.text.trim(),
        "Address": _addressController.text.trim(),
        "Parent Phone": parentPhone,
        "Guardian Name": _guardianNameController.text.trim(),
        "Guardian Phone": _guardianPhoneController.text.trim(),
        "Department": _selectedDepartment ?? '',
        "Semester": _selectedSemester ?? '',
        "Gender": _selectedGender ?? '',
        "UserID": userId,
        "Password": password,
      };

      final url = Uri.parse('$apiBaseUrl/students/add');
      try {
        final response = await http.post(
          url,
          headers: {'Content-Type': 'application/json'},
          body: jsonEncode(studentData),
        );

        if (!mounted) return;

        if (response.statusCode == 201) {
          showDialog(
            context: context,
            builder: (_) => AlertDialog(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20),
              ),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Icon(Icons.check_circle, color: Colors.green, size: 80),
                  const SizedBox(height: 10),
                  Text(
                    "Student Saved Successfully!",
                    style: GoogleFonts.poppins(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 15),
                  Text(
                    "User ID: $userId",
                    style: GoogleFonts.poppins(fontSize: 16),
                  ),
                  Text(
                    "Password: $password",
                    style: GoogleFonts.poppins(fontSize: 16),
                  ),
                  const SizedBox(height: 20),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                    ),
                    onPressed: () {
                      Navigator.pop(context);
                      Navigator.pop(context);
                    },
                    child: const Text(
                      "OK",
                      style: TextStyle(color: Colors.white),
                    ),
                  ),
                ],
              ),
            ),
          );
        } else {
          final error = jsonDecode(response.body);
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                "Error: ${error['detail'] ?? 'Could not save student'}",
              ),
              backgroundColor: Colors.red,
            ),
          );
        }
      } catch (e) {
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("Network Error: $e"),
            backgroundColor: Colors.red,
          ),
        );
      } finally {
        if (mounted) {
          setState(() {
            _isLoading = false;
          });
        }
      }
    }
  }

  Widget _buildTextField(
    String label,
    TextEditingController controller, {
    bool isNumber = false,
    bool isMultiline = false,
    bool readOnly = false,
    VoidCallback? onTap,
    bool isEmail = false,
    bool isPhone = false,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 5),
      child: TextFormField(
        autovalidateMode: AutovalidateMode.onUserInteraction,
        controller: controller,
        readOnly: readOnly,
        onTap: onTap,
        maxLines: isMultiline ? 3 : 1,
        keyboardType: isNumber || isPhone
            ? TextInputType.number
            : isEmail
                ? TextInputType.emailAddress
                : TextInputType.text,
        validator: (value) {
          if (value == null || value.trim().isEmpty) {
            return 'Please enter $label';
          }
          if (isEmail && !isValidEmail(value.trim())) {
            return 'Please enter a valid Gmail ID';
          }
          if (isPhone && !isValidPhone(value.trim())) {
            return 'Please enter a valid 10-digit phone number';
          }
          if (label == "Admission Number" &&
              !RegExp(r'^[a-zA-Z0-9]+$').hasMatch(value.trim())) {
            return 'Admission Number can only contain letters and numbers';
          }
          return null;
        },
        decoration: InputDecoration(
          labelText: label,
          labelStyle: GoogleFonts.poppins(),
          border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
        ),
      ),
    );
  }

  Widget _buildDropdown(
    String label,
    String? value,
    List<String> items,
    Function(String?) onChanged,
  ) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 5),
      child: DropdownButtonFormField<String>(
        autovalidateMode: AutovalidateMode.onUserInteraction,
        value: value,
        items: items
            .map((e) => DropdownMenuItem(value: e, child: Text(e)))
            .toList(),
        onChanged: onChanged,
        validator: (val) => val == null ? 'Please select $label' : null,
        decoration: InputDecoration(
          labelText: label,
          labelStyle: GoogleFonts.poppins(),
          border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          "Add Student",
          style: GoogleFonts.poppins(
              fontWeight: FontWeight.bold, color: Colors.white),
        ),
        backgroundColor: Colors.blue,
        iconTheme: const IconThemeData(color: Colors.white),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildTextField(
                "Institution Name",
                TextEditingController(text: "KMCT School of Business"),
                readOnly: true,
              ),
              _buildTextField("Student Name", _studentNameController),
              _buildTextField("Admission Number", _admissionNoController,
                  isNumber: false),
              _buildDropdown("Department", _selectedDepartment, departments,
                  (val) => setState(() => _selectedDepartment = val)),
              _buildTextField("Academic Year", _academicYearController),
              _buildDropdown("Semester", _selectedSemester, semesters,
                  (val) => setState(() => _selectedSemester = val)),
              _buildTextField("Phone Number", _phoneController, isPhone: true),
              _buildTextField("Email ID", _emailController, isEmail: true),
              _buildDropdown("Gender", _selectedGender, genders,
                  (val) => setState(() => _selectedGender = val)),
              _buildTextField(
                "Date of Birth",
                _dobController,
                readOnly: true,
                onTap: () async {
                  DateTime? picked = await showDatePicker(
                    context: context,
                    initialDate: DateTime(2000),
                    firstDate: DateTime(1980),
                    lastDate: DateTime.now(),
                  );
                  if (picked != null) {
                    _dobController.text =
                        "${picked.day}-${picked.month}-${picked.year}";
                  }
                },
              ),
              _buildTextField("Father's Name", _fatherNameController),
              _buildTextField("Mother's Name", _motherNameController),
              _buildTextField("Address", _addressController,
                  isMultiline: true),
              _buildTextField("Parent's Phone Number", _parentPhoneController,
                  isPhone: true),
              _buildTextField("Guardian Name", _guardianNameController),
              _buildTextField("Guardian Phone Number",
                  _guardianPhoneController, isPhone: true),
              const SizedBox(height: 20),
              Center(
                child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    padding: const EdgeInsets.symmetric(
                        horizontal: 30, vertical: 12),
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10)),
                  ),
                  onPressed: _isLoading ? null : _saveStudent,
                  child: _isLoading
                      ? const CircularProgressIndicator(color: Colors.white)
                      : Text(
                          "Save Student",
                          style: GoogleFonts.poppins(
                              fontSize: 16, color: Colors.white),
                        ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
